
#pragma warning(disable:4996)

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define GAME_STEP 5 // 게임 난이도 조절
#define DIC_SIZE 5  // 난이도별 단어 개수
#define WORD_LEN 20 // 단어 최대 길이

#define RELEASE

char game_dic[GAME_STEP][DIC_SIZE][WORD_LEN] =
{ { "game", "ship", "role", "exit", "leap" },
{ "korea", "close", "enter", "peace", "fight" },
{ "father", "parent", "friend", "monday", "seesaw" },
{ "picture", "computer", "denmark", "extract", "eclipse" },
{ "function", "instinct", "criminal", "overcome", "recovery" } };


/* 함수 : 스테이지 변경 */
int GoNextStage(char* word, bool initializing)
{
	static int stage = 0;

	if (stage >= GAME_STEP) {
		printf("모든 스테이지를 클리어하셨습니다.\n 축하드립니다. \n");
		return NULL;
	}
	else if (initializing == true) {
		stage = 0;
		return NULL;
	}


	strcpy(word, game_dic[stage++][rand() % DIC_SIZE]);
	return stage;
}

/* 함수 : 글자 수 만큼의 언더바와 백스페이스 */
void PrintHintBlank(int stage, char* word, bool* blind)
{
	printf("HINT : ");
	for (int i = 0; i < stage + 3; i++) {
		if (*(blind + i) == false)
			printf("_");
		else
			printf("%c", *(word + i));
	}
	printf("\n");
}

/* 함수 : 글자가 포함되는지 확인 */
bool CheckIncludeChar(char key, char* word, bool* blind)
{
	bool flag = false;
	for (int i = 0; i < strlen(word); i++) {
		if (*(word + i) == key) {
			flag = true;
			*(blind + i) = true;
		}
	}
	return flag;
}

/* 함수 : 행맨 및 남은 기회 출력 */
void PrintHangman(int step) { // 행맨 프린트
	switch (step)
	{
	case 1:
		printf("────────┬───────┐\n");
		printf("                │              │\n");
		printf("                ○              │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("             CHANCE 6           │\n");
		break;
	case 2:
		printf("────────┬───────┐\n");
		printf("                │              │\n");
		printf("                ○              │\n");
		printf("                ┼              │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("             CHANCE 5           │\n");
		break;
	case 3:
		printf("────────┬───────┐\n");
		printf("                │              │\n");
		printf("                ○              │\n");
		printf("                ┼              │\n");
		printf("                │              │\n");
		printf("               ┌┐             │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("             CHANCE 4           │\n");
		break;
	case 4:
		printf("────────┬───────┐\n");
		printf("                │              │\n");
		printf("                ○              │\n");
		printf("              ┌┼              │\n");
		printf("              ││              │\n");
		printf("               ┌┐             │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("             CHANCE 3           │\n");
		break;
	case 5:
		printf("────────┬───────┐\n");
		printf("                │              │\n");
		printf("                ○              │\n");
		printf("              ┌┼┐            │\n");
		printf("              │││            │\n");
		printf("               ┌┐             │\n");
		printf("                                │\n");
		printf("                                │\n");
		printf("             CHANCE 2           │\n");
		break;
	case 6:
		printf("────────┬───────┐\n");
		printf("                │              │\n");
		printf("                ○              │\n");
		printf("              ┌┼┐            │\n");
		printf("              │││            │\n");
		printf("               ┌┐             │\n");
		printf("               │               │\n");
		printf("               ┘               │\n");
		printf("             CHANCE 1           │\n");
		break;
	case 7:
		printf("────────┬───────┐\n");
		printf("                │              │\n");
		printf("                ○              │\n");
		printf("              ┌┼┐            │\n");
		printf("              │││            │\n");
		printf("               ┌┐             │\n");
		printf("               ││             │\n");
		printf("               ┘└             │\n");
		printf("             GAME OVER          │\n");
		break;
	}
}

/* 함수 : 정답을 모두 맞췄는지 확인 */
bool IsBlindOpened(bool* blind, int stage)
{
	for (int i = 0; i < stage + 3; i++) {
		if (*(blind + i) == false)
			return false;
	}
	return true;
}

/* 함수 : 블라인드 초기화*/
void InitializingBlind(bool* blind)
{
	for (int i = 0; i < WORD_LEN; i++)
		* (blind + i) = false;
}

int main(void)
{
	char word[WORD_LEN]; // 정답 저장
	bool blind[WORD_LEN]; // 블라인드 배열
	int stage_level, stage_step; // 스테이지 레벨 / 스텝(틀린 횟수)

	char key; // 입력받을 글자

	srand((unsigned)time(NULL));

	while ((stage_level = GoNextStage(word, false)) != NULL) {

		printf("\nSTAGE %d", stage_level); // 스테이지 출력
#ifdef DEBUG // 디버그 모드일 경우 정답 출력
		printf(" _ %s", word);
#endif
		printf("\n"); // 개행

		InitializingBlind(blind); // 블라인드 초기화
		stage_step = 0; // 틀린 횟수 초기화

		do {
			fflush(stdin);
			PrintHintBlank(stage_level, word, blind); // 힌트 글자수 출력
			printf("CHARACTER : ");
			scanf("%c", &key);
			if (!CheckIncludeChar(key, word, blind)) {
				stage_step++;
				PrintHangman(stage_step);
			}
		} while (stage_step < 7 && !IsBlindOpened(blind, stage_level));

		if (stage_step >= 7) {
			fflush(stdin);
			printf("게임에 패배하셨습니다. 다시 하시겠습니까? (Y/N)");
			scanf("%c", &key);

			if (key == 'y' || key == 'Y') {
				GoNextStage(word, true); // 스테이지 초기화
				continue; // 다시 시작
			}
			else
				break;
		}
		else {
			printf("CORRECT ANSWER : %s\n\n", word);
		}
	}

	printf("\n\n게임을 종료합니다. \n");

	return 0;
}

